{"version":3,"sources":["SelectMultiple.js","App.js","reportWebVitals.js","index.js"],"names":["SectionMenu","forwardRef","ref","key","label","onClick","checked","MenuItem","style","paddingLeft","display","Checkbox","ListItemText","primary","ItemMenu","value","rest","SelectCustom","options","onChange","onChangeCleaner","teste","event","target","includes","undefined","console","log","formatedOptions","reduce","acc","item","type","itens","watchSectionStatus","id","find","section","map","every","itemValue","FormControl","variant","width","InputLabel","Select","fullWidth","multiple","renderValue","selected","filter","Boolean","op","join","action","itemsTargetValues","newValue","filteredValue","current","index","indexOf","handleSection","findIndex","App","useState","setValue","className","SelectMultiple","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f4fe948.chunk.js","sourcesContent":["import { FormControl, InputLabel, Select, MenuItem, Checkbox, ListItemText } from '@material-ui/core'\nimport { forwardRef } from 'react'\n\n\nconst SelectCustom = ({options, label, onChange, value = [], teste}) => {\n\n\tconst onChangeCleaner = (event) => {\n\t\tif (!event.target || event.target.value.includes(undefined)) {\n\t\t\treturn console.log(\"nao executa\")\n\t\t} else {\n\t\t\tonChange(event)\n\t\t}\n\t}\n\n\tconst formatedOptions = options.reduce((acc, item) => {\n\t\treturn [...acc, { label: item.label, type: 'section' }, ...item.itens]\n\t}, [])\n\n\tconst handleSection = (id, action) => {\n\t\tconst sectionTarget = options.find(section => section['label'] === id)\n\t\tconst itemsTarget = sectionTarget.itens\n\t\tconst itemsTargetValues = itemsTarget.map(item => item['value'])\n\n\t\tif (action) {\n\t\t\tconst newValue = [...value, ...itemsTargetValues]\n\t\t\tconst filteredValue = newValue.filter((current, index) => newValue.indexOf(current) === index);\n\t\t\treturn onChangeCleaner({target: { value: filteredValue }})\n\t\t}\n\n\t\tconst newValue = value.filter(item => !itemsTargetValues.includes(item))\n\t\tconsole.log(newValue)\n\t\tonChangeCleaner({target: { value: newValue }})\n\n\t}\n\n\tconst watchSectionStatus = (id, itens) => {\n\t\tconst sectionTarget = options.find(section => section['label'] === id)\n\t\tconst itemsTarget = sectionTarget.itens\n\n\t\tconst itemsTargetValues = itemsTarget.map(item => item['value'])\n\n\t\treturn itemsTargetValues.every(itemValue => value.includes(itemValue))\n\t}\n\n\treturn (\n\t\t\t<FormControl variant=\"outlined\" style={{width: '500px'}}>\n        <InputLabel>{label}</InputLabel>\n        <Select\n\t\t\t\t\tfullWidth\n          multiple\n\t\t\t\t\tlabel={label}\n          value={value}\n          onChange={onChangeCleaner}\n\t\t\t\t\t// Podemos utilizar o objeto inteiro como value, logo nao precisamos iterar para achar o label atraves do value\n          renderValue={(selected) => selected.filter(Boolean).map(value => formatedOptions.find(op => op.value === value).label).join(', ')}\n        >\n\t\t\t\t\t{formatedOptions.map(item => {\n\t\t\t\t\t\tif(item.type === 'section') {\n\t\t\t\t\t\t\treturn <SectionMenu checked={watchSectionStatus(item.label, item)} onClick={() => handleSection(item.label, !watchSectionStatus(item.label, item))} key={item.label} label={item.label} />\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<ItemMenu\n\t\t\t\t\t\t\t\tkey={item.label}\n\t\t\t\t\t\t\t\tlabel={item.label}\n\t\t\t\t\t\t\t\tvalue={item.value}\n\t\t\t\t\t\t\t\tchecked={value.findIndex(itemValue => itemValue === item.value) > -1}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\n\t\t\t\t\t})}\n        </Select>\n      </FormControl>\n\t)\n}\n\nconst SectionMenu = forwardRef(({key, label, onClick, checked}, ref) => {\n\n\treturn (\n\t\t\t<MenuItem onClick={onClick} style={{ paddingLeft: 0, display: 'flex' }} key={key}>\n\t\t\t\t<Checkbox checked={checked} />\n\t\t\t\t<ListItemText primary={label} />\n\t\t\t</MenuItem>\n\t)\n})\n\nconst ItemMenu = forwardRef(({value, label, checked, ...rest}, ref) => {\n\n\n\treturn (\n\t\t<MenuItem key={label} value={label} ref={ref} {...rest}>\n\t\t\t<Checkbox checked={checked} />\n\t\t\t<ListItemText primary={label} />\n\t\t</MenuItem>\n\t)\n})\n\nexport default SelectCustom\n\n// import React from 'react';\n// import clsx from 'clsx';\n// import { makeStyles, useTheme } from '@material-ui/core/styles';\n// import Input from '@material-ui/core/Input';\n// import InputLabel from '@material-ui/core/InputLabel';\n// import MenuItem from '@material-ui/core/MenuItem';\n// import FormControl from '@material-ui/core/FormControl';\n// import ListItemText from '@material-ui/core/ListItemText';\n// import Select from '@material-ui/core/Select';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import Chip from '@material-ui/core/Chip';\n\n// const useStyles = makeStyles((theme) => ({\n//   formControl: {\n//     margin: theme.spacing(1),\n//     minWidth: 120,\n//     maxWidth: 300,\n//   },\n//   chips: {\n//     display: 'flex',\n//     flexWrap: 'wrap',\n//   },\n//   chip: {\n//     margin: 2,\n//   },\n//   noLabel: {\n//     marginTop: theme.spacing(3),\n//   },\n// }));\n\n// const ITEM_HEIGHT = 48;\n// const ITEM_PADDING_TOP = 8;\n// const MenuProps = {\n//   PaperProps: {\n//     style: {\n//       maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n//       width: 250,\n//     },\n//   },\n// };\n\n// const names = [\n//   'Oliver Hansen',\n//   'Van Henry',\n//   'April Tucker',\n//   'Ralph Hubbard',\n//   'Omar Alexander',\n//   'Carlos Abbott',\n//   'Miriam Wagner',\n//   'Bradley Wilkerson',\n//   'Virginia Andrews',\n//   'Kelly Snyder',\n// ];\n\n// function getStyles(name, personName, theme) {\n//   return {\n//     fontWeight:\n//       personName.indexOf(name) === -1\n//         ? theme.typography.fontWeightRegular\n//         : theme.typography.fontWeightMedium,\n//   };\n// }\n\n// export default function MultipleSelect() {\n//   const classes = useStyles();\n//   const theme = useTheme();\n//   const [personName, setPersonName] = React.useState([]);\n\n//   const handleChange = (event) => {\n//     setPersonName(event.target.value);\n//   };\n\n//   const handleChangeMultiple = (event) => {\n//     const { options } = event.target;\n//     const value = [];\n//     for (let i = 0, l = options.length; i < l; i += 1) {\n//       if (options[i].selected) {\n//         value.push(options[i].value);\n//       }\n//     }\n//     setPersonName(value);\n//   };\n\n//   return (\n//     <div>\n//       <FormControl className={classes.formControl}>\n//         <InputLabel id=\"demo-mutiple-name-label\">Name</InputLabel>\n//         <Select\n//           labelId=\"demo-mutiple-name-label\"\n//           id=\"demo-mutiple-name\"\n//           multiple\n//           value={personName}\n//           onChange={handleChange}\n//           input={<Input />}\n//           MenuProps={MenuProps}\n//         >\n//           {names.map((name) => (\n//             <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n//               {name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       <FormControl className={classes.formControl}>\n//         <InputLabel id=\"demo-mutiple-checkbox-label\">Tag</InputLabel>\n//         <Select\n//           labelId=\"demo-mutiple-checkbox-label\"\n//           id=\"demo-mutiple-checkbox\"\n//           multiple\n//           value={personName}\n//           onChange={handleChange}\n//           input={<Input />}\n//           renderValue={(selected) => selected.join(', ')}\n//           MenuProps={MenuProps}\n//         >\n//           {names.map((name) => (\n//             <MenuItem key={name} value={name}>\n//               <Checkbox checked={personName.indexOf(name) > -1} />\n//               <ListItemText primary={name} />\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       <FormControl className={classes.formControl}>\n//         <InputLabel id=\"demo-mutiple-chip-label\">Chip</InputLabel>\n//         <Select\n//           labelId=\"demo-mutiple-chip-label\"\n//           id=\"demo-mutiple-chip\"\n//           multiple\n//           value={personName}\n//           onChange={handleChange}\n//           input={<Input id=\"select-multiple-chip\" />}\n//           renderValue={(selected) => (\n//             <div className={classes.chips}>\n//               {selected.map((value) => (\n//                 <Chip key={value} label={value} className={classes.chip} />\n//               ))}\n//             </div>\n//           )}\n//           MenuProps={MenuProps}\n//         >\n//           {names.map((name) => (\n//             <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n//               {name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       <FormControl className={clsx(classes.formControl, classes.noLabel)}>\n//         <Select\n//           multiple\n//           displayEmpty\n//           value={personName}\n//           onChange={handleChange}\n//           input={<Input />}\n//           renderValue={(selected) => {\n//             if (selected.length === 0) {\n//               return <em>Placeholder</em>;\n//             }\n\n//             return selected.join(', ');\n//           }}\n//           MenuProps={MenuProps}\n//           inputProps={{ 'aria-label': 'Without label' }}\n//         >\n//           <MenuItem disabled value=\"\">\n//             <em>Placeholder</em>\n//           </MenuItem>\n//           {names.map((name) => (\n//             <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n//               {name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       <FormControl className={classes.formControl}>\n//         <InputLabel shrink htmlFor=\"select-multiple-native\">\n//           Native\n//         </InputLabel>\n//         <Select\n//           multiple\n//           native\n//           value={personName}\n//           onChange={handleChangeMultiple}\n//           inputProps={{\n//             id: 'select-multiple-native',\n//           }}\n//         >\n//           {names.map((name) => (\n//             <option key={name} value={name}>\n//               {name}\n//             </option>\n//           ))}\n//         </Select>\n//       </FormControl>\n//     </div>\n//   );\n// }\n","import { useState } from 'react';\nimport SelectMultiple from './SelectMultiple'\n\nimport './App.css';\n\nconst options = [\n\t{\n\t\tlabel: 'Capitulos',\n\t\tid: 918,\n\t\titens: [\n\t\t\t{\n\t\t\t\tlabel: 'Capitulo 1',\n\t\t\t\tvalue: 12\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Capitulo 2',\n\t\t\t\tvalue: 49\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tlabel: 'Avaliacoews',\n\t\tid: 912,\n\t\titens: [\n\t\t\t{\n\t\t\t\tlabel: 'Prova 1',\n\t\t\t\tvalue: 321\n\t\t\t}\n\t\t]\n\t}\n]\n\n\nfunction App() {\n\tconst [value, setValue] = useState([])\n\n\tconsole.log(value)\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\t\t\t\t<SelectMultiple\n\t\t\t\t\tteste={setValue}\n\t\t\t\t\tonChange={(e) => setValue(e.target.value)}\n\t\t\t\t\tvalue={value}\n\t\t\t\t\toptions={options}\n\t\t\t\t\tlabel=\"Lorem ipsum\"\n\t\t\t\t/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}